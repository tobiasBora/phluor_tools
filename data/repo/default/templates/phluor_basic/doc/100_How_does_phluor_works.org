* How does phluor works?

** Where should I go to configure...
*** The name of the project
See the first lines of =Makefile.conf=
*** The port and some configuration of the server
The file =server_conf.test.dico= contains information about the server, and it is used by both =Makefile= and =run_server.conf= (which contains the configuration file of the server).

*** The path to commands
Go in =Makefile.conf=

*** The name of a brick
Go in =src/$(brick)/Makefile.conf=.
*** The dependencies of a brick
Go in =src/$(brick)/Makefile=, the things to change are documented here.

** Files of the project
*** =Makefile=
This file compiles the whole project and run the server. It gets some info from =server_conf.test.dico= (port...) an =Makefile.conf= (path of programs).
*** =server_conf.test.dico=
Contains some server related data, such as the port used by the server
*** =Makefile.conf=
Path to some programs and project name.
*** =Makefile.brick_comp=
A default Makefile which should be included in every brick Makefile.
*** =reverse_uniq.ml=
A little script which reverse and remove several occurences of the same line. Usefull to Makefile to deal with dependencies between bricks. You shouldn't edit it.
*** =root=
A file saying that you are at the root of the project. It contains some info about the name and the version of the template used.
*** =run_server.conf=
A template to run the server. It uses the dico (see "what is a dico") =server_conf.test.dico=, and files contained in =$B/config/= (see "how each brick can modify the server configuration").
*** =src/=
Contains each brick.
*** =static/=
Contains all documents which should be available without an ocsigenserver parsing (pictures, css...)
*** =www/= [AUTOGENERATED]
This folder is generated during compilation, contains the configuration files, a copy of each library cma, and a copy of the static folder.
**** =www/bin_js/=
Contains each client cmo file for each brick. All of them are then packed into one js file.
**** =www/config/=
Contain in subdir all files of =$B/config/=.
**** =www/server_conf.dico=
Copy of =server_conf.dico=, dico for =www/run_server.conf=.
**** =www/local/=
Log...
**** =www/modules/=
In subfolders contains for each brick the cma server part. They are included from the file =www/config/$B/module.xml= in =www/run_server.conf=.
**** =www/static/=
Contains all static files, copy from =static= and from =src/$B/static/=, the main js file is in =www/static/js/main_js.js
** Files of each brick
Note that =$B= is an abreviation for =src/$(brick_name)/=
*** =$B/*.eliom= and =$B/*.ml=
You can put here every source file linked with the brick, it will be autoload.
*** =$B/config/=
Put in this folder any file you want to be replaced in the file =run_server.conf= (see "How each brick can modify the server configuration ?"). Please notice the file =$B/config/module.xml= which must contain every .cma file needed by the server for this brick only (don't mind dependencies).

*** =$B/_dep= and =$B/_dep_lib= [AUTOGENERATED]
Auto-generated during compilation, =$B/_dep= should contain *all* dependencies and subdependencies needed by the library. =$B/_dep_lib= should contain every client files from the current brick (extension .cmo) that must be included in the final javascript file.

*** =$B/_exec/= [AUTOGENERATED]
This folder, autogenerated must contain every cma files needed by the server. It is then copied in =www/modules/($brick_name)/=
*** =services/=
This folder contains an other brick with the same structure as above. It is used to register in a severate the services to be able to call them from libraries without any problem of dependence (without that, it wouldn't be possible to both insert links from A in B and from B in A).
*** =static/=
This folder should contain any file available without ocsigenserver parse, such as pictures, css... It is then copied in =www/static/$(brick_name)/=
** What is a dico file ?
A dico file is a file with this syntax :
#+BEGIN_SRC text
# Any comment here...
WORD1 = REPLACEMENT1
WORD2 = REPLACEMENT2
#+END_SRC

When you copy a file with phluor_tool, you can choose to replace each occurences of =%%WORDn%%%= with the correspondant word =REPLACEMENTn=. The advantages of such files is that they can be loaded to in Makefile with include : it avoid information duplicate.

** What is the algorithm used to deal with dependencies
/I will abreviate here the path =src/$(brick)/= with =$B/=./

Each brick contains in =$B/Makefile= the dependencies it need to compile (the user only need to edit this file). Ocaml can deal with library dependencies (Unix...) while phluor deals with brick dependency. To know in what order the bricks must be compiled and added in the project (for example in the =run_server.conf= file), I use a simple mechanism : each brick will create, when compiling, a file =$B/_dep= containing *every* bricks it needs to compile, and in the right order of dependencies (the less "primitive" dependency must be on the last line).

This file is constructed like this : for each dependency =$D= in =$B/Makefile=, go in =$D/=, recursively generate the =$D/_dep= file, copy =$D/_dep= in =$B/_dep= after the already existing lines. Then, to know what will the bricks usefull and in which order they need to be loaded, for each brick =$B= in =Makefile= copy =$B= in the file =_dep=, reverse this file, and only keep the first occurence of each library.

For example if A1 uses A2 which uses A3, and if B1 uses A2, in the Makefile of A, only "A2" must be present, and phluor will add by itself A3 in the file =src/A1/_dep= like this:
#+BEGIN_SRC text
A1
A2
A3
#+END_SRC
=src/B1/_dep= will contain:
#+BEGIN_SRC text
B1
A2
#+END_SRC
=_dep= will contain after the copy:
#+BEGIN_SRC 
A1
A2
A3
B1
A2
#+END_SRC
and after reversing and cleaning:
#+BEGIN_SRC 
A2
B1
A3
A1
#+END_SRC
As you can see A2 will be the first to be compiled and loaded.

The file =$B/_dep_lib= the name of the .cmo files of the current brick (usefull to know in which order one must link libraries to produce the js file) and doesn't need to contain cmo from other bricks while it's already the goal of =$B/_dep=.

** How each brick can modify the server configuration ?
The file =run_server.conf= contains somewhere something like
: %%INC(<any file name>)%%
If the file =<any file name>= doesn't exists, for each library the file =$B/config/<any file name>= will be inserted right here.

For example, if one brick wants to insert an other extension, just put in =$B/config/extension.conf= the line
: <extension findlib-package="<the new extension>" />
